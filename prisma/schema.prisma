generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------- USER ---------------------
model User {
  id         String   @id @default(uuid())
  full_name  String
  email      String   @unique
  password   String
  role       UserRole @default(USER)
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orders     Order[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

// --------------------- BRAND ---------------------
model Brand {
  id        String    @id @default(uuid())
  logo      String?
  name      String
  description String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products  Product[]

  @@map("brands")
}

// --------------------- CATEGORY ---------------------
model Category {
  id            String        @id @default(uuid())
  name          String
  icon          String?
  subcategories String[]
  isDeleted     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  products      Product[]

  @@map("categories")
}

// --------------------- PRODUCT ---------------------
enum DiscountType {
  FLAT
  PERCENTAGE
}

enum ProductType {
  HOT
  NEW
  UPCOMING
  SALE
  FEATURED
  LIMITED
  TRENDING
  EXCLUSIVE
}

model Product {
  id            String       @id @default(uuid())
  name          String
  description   String
  subcategory   String
  price         Float        // Final price after discount
  originalPrice Float        // Price before discount
  discountType  DiscountType?
  discountValue Float?
  discountStart DateTime?
  discountEnd   DateTime?
  stock         Int
  sku           String       @unique
  brandId       String
  categoryId    String
  images        String[]
  rating        Float?
  reviewsCount  Int          @default(0)
  badge         ProductType  @default(NEW)
  inStock       Boolean      @default(true)
  isDeleted     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  brand         Brand        @relation(fields: [brandId], references: [id])
  category      Category     @relation(fields: [categoryId], references: [id])
  specialOffers SpecialOffer[]

  orders        Order[]

  @@map("products")
}

// --------------------- SPECIAL OFFER ---------------------
model SpecialOffer {
  id          String   @id @default(uuid())
  title       String
  description String?
  productId   String
  image       String
  validFrom   DateTime
  validUntil  DateTime?
  isActive    Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product  @relation(fields: [productId], references: [id])
  orders      Order[]

  @@map("special_offers")
}

// --------------------- ORDER ---------------------
model Order {
  id             String        @id @default(uuid())
  userId         String
  productId      String
  specialOfferId String?
  quantity       Int
  totalPrice     Float
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user           User          @relation(fields: [userId], references: [id])
  product        Product       @relation(fields: [productId], references: [id])
  specialOffer   SpecialOffer? @relation(fields: [specialOfferId], references: [id])

  @@map("orders")
}

// --------------------- SLIDER ---------------------
model Slider {
  id          String   @id @default(uuid())
  amount      String
  title       String
  description String
  buttonText  String
  photo       String
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sliders")
}
