generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (as you already have)
model User {
  id         String   @id @default(uuid())
  full_name  String
  email      String   @unique
  password   String
  role       UserRole @default(USER)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

// Brand model
model Brand {
  id          String    @id @default(uuid())
  logo String?
  name        String    
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]

  @@map("brands")
}



// Discount type enum
enum DiscountType {
  FLAT      
  PERCENTAGE 
}

enum ProductType {
  HOT         
  NEW          
  UPCOMING    
  SALE         
  FEATURED     
  LIMITED     
  TRENDING     
  EXCLUSIVE    
}


// Product model
model Product {
  id               String       @id @default(uuid())
  name             String
  description      String
  subcategory      String
  price            Float        // Final selling price after discount
  originalPrice    Float        // Full price before discount
  discountType     DiscountType? // FLAT or PERCENTAGE
  discountValue    Float?       // Amount or percentage depending on discountType
  discountStart    DateTime?    // Optional: start date of discount
  discountEnd      DateTime?    // Optional: end date of discount
  stock            Int
  sku              String       @unique
  brandId          String
  categoryId       String
  images           String[]
  rating           Float?
  reviewsCount     Int          @default(0)
  isDeleted Boolean @default(false)
  badge            ProductType   @default(NEW)
  inStock          Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  brand            Brand        @relation(fields: [brandId], references: [id])
  category         Category     @relation(fields: [categoryId], references: [id])

  @@map("products")
}


model Category {
  id            String        @id @default(uuid())
  name          String
  icon          String?
  subcategories String[]
  products      Product[]
  specialOffers SpecialOffer[]
  isDeleted     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("categories")
}

model SpecialOffer {
  id          String   @id @default(uuid())
  title       String
  description String?
  categoryId  String
  image       String
  date        DateTime
  time        String
  category    Category @relation(fields: [categoryId], references: [id])
}
model Slider {
  id String @id @default(uuid())
  amount String 
  title String 
  description String 
  buttonText String 
  photo String 
  isDeleted Boolean
}

